import collections
from itertools import chain
import math
import numpy as np
import pickle
import random

class Word2VecVocabulary():
    def __init__(self, vocabulary_size):
        self.vocabulary_size = vocabulary_size

        self.count = []
        self.vocab_words = {}
        self.tfidf = []

        self.data_index = 0 # iteration index

    def initialize_and_save_vocab(self, document_gen, path):
        """Initializes vocabulary from the sentences generated by
        document_gen.
        """
        words = list(chain.from_iterable(document_gen))
        self.count = [['UNK', -1]]
        self.count.extend(collections.Counter(words).most_common(self.vocabulary_size - 1))
        self.vocab_words = dict()
        for i, word_freq in enumerate(self.count):
            self.vocab_words[word_freq[0]] = i
        unk_count = 0
        for word in words:
            if word in self.vocab_words:
                index = self.vocab_words[word]
            else:
                index = 0  # dictionary['UNK']
                unk_count += 1
        self.count[0][1] = unk_count

        with open(path + '_vocab.pickle', "wb") as f:
            pickle.dump(self.count, f)

    def initialize_and_save_idf(self, document_gen, path):
        """Generates a idf table for every word in the
        vocabulary by iterating over the document generator
        'document_gen'. Requires the vocabulary to be loaded.
        """
        num_docs = 0
        doc_freq = [[c[0], 0] for c in self.count]

        for doc in document_gen:
            num_docs = num_docs + 1
            for i, entry in enumerate(doc_freq):
                if i > 0 and entry[0] in doc: # skip unknown token
                    doc_freq[i][1] = doc_freq[i][1] + 1

        self.idf = {e[0]: math.log((num_docs+1) / (e[1]+1)) for e in doc_freq}
        self.idf['UNK'] = 0.0 # unknown token has idf of 0

        with open(path + '_idf.pickle', "wb") as f:
            pickle.dump(self.idf, f)

    def load_idf(self, path):
        """Loads idf table. The vocabulary should already
        be loaded for this to be of any use.
        """
        with open(path + '_idf.pickle', 'rb') as f:
            self.idf = pickle.load(f)

    def load_vocab(self, path):
        """Load vocabulary and perform initialization
        of the sample table.
        """
        with open(path + '_vocab.pickle', 'rb') as f:
            self.count = pickle.load(f)
            self.vocab_words = {vocab_word[0]: idx for idx, vocab_word in enumerate(self.count)}

    def get_tfidf_weights(self, doc):
        """Get term frequency of a word in a document.
        """
        tf = {c[0]: 0 for c in self.count}
        for word in doc:
            if word in tf:
                tf[word] = tf[word] + 1

        tfidf = {word: tf[word] * self.idf[word] for word in tf.keys() & self.idf.keys()}
        return tfidf

    def get_index(self, word):
        """Returns word index or -1 if word is not
        in dictionary.
        """
        idx = self.vocab_words.get(word)
        return 0 if idx is None else idx

    def get_count(self):
        return self.count

    def get_vocabulary(self):
        return self.vocab_words